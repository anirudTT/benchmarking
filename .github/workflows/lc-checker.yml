name: "L-Checker Workflow"

on:
  pull_request:
    branches:
      - "main"
    types:
      - opened
      - reopened
      - synchronize
      - assigned
      - review_requested

jobs:
  check-and-comment:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install infra dependencies
        run: python -m pip install git+https://github.com/espressif/check-copyright.git@master

      - name: Check SPDX licenses and comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const execSync = require('child_process').execSync;
            const command = `python -m check_copyright --verbose --dry-run --replace --config ./check_copyright_config.yaml . | awk '/Some files are without a copyright note and a license header needs to be added:/{flag=1; next} flag && /./'`;
            let output;
            try {
              output = execSync(command, { encoding: 'utf-8' }); // captures stdout
            } catch (error) {
              output = error.stdout; // captures stdout from the error, if command execution fails
            }

            // Remove ANSI color codes
            output = output.replace(/\u001b\[.*?m/g, '');

            const issueNumber = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            if (output) {
              const commentBody = `Checking SPDX licenses checking step failed. Please check the following files and add the missing SPDX licenses to them!:\n\n${output}`;
              github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: owner,
                repo: repo,
                body: commentBody
              });
            } else {
              console.log("No SPDX license issues found.");
            }




# name: "l-checker workflow"

# on:
#   pull_request:
#     branches:
#       - "main"
#     types:
#       - opened
#       - reopened
#       - synchronize
#       - assigned
#       - review_requested

# jobs:
#   check-spdx-licenses:
#     runs-on: ubuntu-20.04
#     outputs:
#       output: ${{ steps.check-licenses.outputs.output }}
#       exit_code: ${{ steps.check-licenses.outputs.exit_code }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'

#       - name: Install infra dependencies
#         run: python -m pip install git+https://github.com/espressif/check-copyright.git@master

#       - name: Check SPDX licenses
#         id: check-licenses
#         run: |
#           set +e
#           output=$(python -m check_copyright --verbose --dry-run --replace --config ./check_copyright_config.yaml . | awk '/Some files are without a copyright note and a license header needs to be added:/,/^\s*$/')
#           exit_code=$?
#           echo "output<<EOF" >> $GITHUB_ENV
#           echo "$output" >> $GITHUB_ENV
#           echo "EOF" >> $GITHUB_ENV
#           echo "exit_code=$exit_code" >> $GITHUB_ENV
#           if [ $exit_code -eq 1 ]; then
#             echo "SPDX license check failed with exit code $exit_code ***************"
#             exit 0  # Exit with code 0 to ensure the workflow continues
#           fi
      


  # comment:
  #   needs: print-then
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Comment on pull request
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const output = "${{ needs.check-spdx-licenses.outputs.output }}";
  #           const issueNumber = context.issue.number;
  #           const owner = context.repo.owner;
  #           const repo = context.repo.repo;

  #           if (output) {
  #             const commentBody = `Checking SPDX licenses failed. Please check the files and add the missing SPDX licenses:\n\n${output}`;
  #             github.rest.issues.createComment({
  #               issue_number: issueNumber,
  #               owner: owner,
  #               repo: repo,
  #               body: commentBody
  #             });
  #           }